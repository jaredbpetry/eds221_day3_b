---
title: "eds221_day3_b"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here) 
library(palmerpenguins)

```

## More for loops 

this example has no 'if'

```{r}

#View(mtcars)

mean_mtcars <- vector(mode = "numeric", length = ncol(mtcars))
#----this has created an empty vector with the same length as the number of columns in mtcars

for (i in seq_along(mtcars)) {
  mean_val <- mean(mtcars[[i]], na.rm = TRUE)
  mean_mtcars[i] <- mean_val
}

#---- mean(mtcars[[i]] is finding the mean of the first column
#---- na.rm = TRUE means remove na values 

mean_mtcars

#---- this has taken the mean of each column and stored them in a new vector that is the length of the number of columns
```

Now, we have an 'if'

is.numeric is a conditional statement and then {} is what it will do if that condition is satisfied... and the loop re-iterates this process through every position of the vector

not sure why this code chunk won't run but it should

```{r}
penguin_med <- vector(mode = "numeric", length = ncol(penguins))

for (i in seq_along(penguins[[i]])) {
  if (is.numeric(penguins[[i]])) {
    penguin_med <- median(penguins[[i]], na.rm = TRUE)
    print(penguin_med)
  }
}
```

## But isn't there an easier way to do this?

yep. **three** things

-   apply()

    -   many variations:

        -   apply() applies a function you specify across rows or columns of a matrix. many people in R use this, but it's still a base function... know this and tidyverse stuff

        -   lapply()

        -   sapply()

        -   tapply()

            -   apply a function **by group** (factor level)

    -   these do iterations for you

```{r}
#---- do the same thing to find the means of each column in mtcars

apply(mtcars, 2, mean)

#the 2nd argument is a 1 for rows and a 2 for columns

```

```{r}
penguins |>  
  mutate(across(c(species, island), toupper))
```

-   dplyr::across()

    -   can use inside mutate() or specify()

    -   can apply a function across columns

I want to calculate mean bill length BY SPECIES AND ISLAND and then summarize... use group_by() and then summarize()

```{r}

#-----you can get amazing summary data by doing this
#-----allison only does this... not apply

this_output <- penguins |> 
  group_by(species, island) |> 
  summarize(mean_bill_length = mean(bill_length_mm, na.rm = TRUE), 
            sd_bill_length = sd(bill_length_mm, na.rm = TRUE))

this_output
```

Find the mean and sd of movie character 'height' in 'starwars' grouped by homeworld

```{r}
starwars |> 
  group_by(homeworld) |> 
  summarize(mean_height = mean(height, na.rm = TRUE), 
            sd_height = sd(height, na.rm = TRUE))
  
```

Find the max, min, and sample size for each species of penguins maximum and minimum flipper length and sample size for each species of penguins

```{r}
penguins |>  
  group_by(species) |> 
  summarize(max_flipper = max(flipper_length_mm), na.rm = TRUE, 
            min_flipper = min(flipper_length_mm), na.rm = TRUE, 
            ss_penguin = nrow(penguins))

##----didn't work
```

Can do something similar by using the across()

```{r}
penguins |> 
  group_by(species) |> 
  summarize(across(where(is.numeric), mean, na.rm = TRUE))

#---- using across within groupby and summarize is awesome 
#---- ues where() to specify what to put into across()
```

want a vector that is each thing in this vector you put in, with the numbers added to it

```{r}
tree_height <- c(1, 2, 3, 4, 5, 7, 4, 7 ,90)

for (i in seq_along(tree_height)) {
  val = tree_height[i] + tree_height[i+1]
  print(val)
}

#----- val is arbetrary ... could be anything... will be stoed as a variable in your env.
```

For loop with conditional statement

converting animal age into human age takes different coefficients for different animals

elephant years = human \* 0.88

dog years = human \* 7

goat years = human \*

```{r}

species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

age_human <- c(3, 8, 4, 6, 12, 18)

animal_ages <- vector(mode = "numeric", length = ncol(species))

for (i in seq_along(species)) {
  if (species[i] == "dog") {
    animal_age <- age_human[i] * 7 
  } else if (species[i] == "elephant") {
    animal_age <- age_human[i] * 0.88 
  } else if (species[i] == "goat") {
    animal_age <- age_human[i] * 4.7
  }
  animal_ages[i] <- animal_age
}


#---- animal_age is a temporary object that only exists within the loop... will not be stored in your environment 
#---- if you want a sotred vector at the end, you have to create an empty vector of the same length that will be populated by the loop (top line) if you don't have this, the output will not be stored.  make animal age populate the 'i'th vector of the empty vector (last line)
```

### for loop in a dataframe

mean values calculated across all columns

```{r}
mean_mtcars <- vector(mode = "numeric", length = ncol(mtcars))

for (i in seq_along(mtcars)) {
  mean_val <- mean(mtcars[[i]], na.rm = TRUE)
  mean_mtcars[[i]] <- mean_val
}

mean_mtcars
```

Syntactic sugar examples

apply()

across()

map_df()

```{r}
#---- same thing but easier
apply(mtcars, 2, mean)

#exact same as:
apply(X = mtcars, MARGIN = 2, FUN = mean)

```

```{r}
map_df(.x = mtcars, .f = mean)
```
